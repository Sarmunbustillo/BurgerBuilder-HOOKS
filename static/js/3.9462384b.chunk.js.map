{"version":3,"sources":["Components/Order/CheckoutSummary/CheckoutSummary.js","containers/Checkout/ContactData/ContactData.js","containers/Checkout/Checkout.js","Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","Components/Order/CheckoutSummary/CheckoutSummary.module.css","containers/Checkout/ContactData/ContactData.module.css"],"names":["CheckoutSummary","props","className","classes","style","width","margin","Burger","ingredients","Button","btnType","clicked","onCheckoutCancelled","onCheckoutContinued","connect","state","ings","burgerBuilder","price","totalPrice","loading","order","token","auth","userId","dispatch","onOrderBurger","orderData","actions","withErrorHandler","useState","name","elementType","elementCofig","type","placeholder","value","validation","required","valid","touched","street","zipCode","minLength","maxLength","country","email","deliveryMethod","options","displayValue","orderForm","setOrderForm","formIsValid","setFormIsValid","orderHandler","event","preventDefault","formData","formElementIdentifier","formElementsArray","key","push","id","config","form","onSubmit","map","fromElement","Input","elementConfig","invalid","shouldValidate","changed","inputIdentifier","updatedFormElement","updateObject","target","checkValidity","updatedOrderForm","inputChangedHandler","disabled","Spinner","ContactData","axios","purchased","summary","to","purchasedRedirect","history","goBack","replace","path","match","component","inputElement","inputClasses","Invalid","join","onChange","option","label","module","exports"],"mappings":"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","file":"static/js/3.9462384b.chunk.js","sourcesContent":["import React from 'react';\r\nimport Burger from '../../Burger/Burger';\r\nimport Button from '../../UI/Button/Button';\r\nimport classes from './CheckoutSummary.module.css';\r\n\r\nconst CheckoutSummary = (props) => {\r\n    return (\r\n        <div className={classes.CheckoutSummary}>\r\n            <h1>We Hope You love it!</h1>\r\n            <div style={{width:'100%', margin:'auto'}}>\r\n                <Burger ingredients={props.ingredients}/>\r\n            </div>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={props.onCheckoutCancelled}   \r\n                >CANCEL</Button>\r\n            <Button \r\n                btnType=\"Success\" \r\n                clicked={props.onCheckoutContinued}\r\n                >CONTINUE</Button>\r\n            \r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CheckoutSummary;\r\n","import React, { useState } from 'react'\r\nimport Button from '../../../Components/UI/Button/Button';\r\nimport classes from './ContactData.module.css';\r\nimport axios from '../../../axios-orders';\r\nimport Spinner from '../../../Components/UI/Spinner/Spinner';\r\nimport Input from '../../../Components/UI/Input/Input';\r\nimport {connect } from 'react-redux';\r\nimport withErrorHandler from '../../../hoc/withErrorHandler/withErrorHandler';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { updateObject, checkValidity } from '../../../shared/utility';\r\n\r\n\r\nconst ContactData = props => {\r\n    const [orderForm, setOrderForm] = useState({\r\n        name: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'text',\r\n                placeholder: 'Your Name'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        street: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'text',\r\n                placeholder: 'Street'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        zipCode: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'number',\r\n                placeholder: 'ZIP Code'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 5,\r\n                maxLength: 5\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        country: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'text',\r\n                placeholder: 'Country'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        email: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'email',\r\n                placeholder: 'Your E-Mail'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        deliveryMethod: {\r\n            elementType: 'select',\r\n            elementCofig: {\r\n                options:\r\n                    [\r\n                        { value: 'fastest', displayValue: 'Fastest' },\r\n                        { value: 'cheapest', displayValue: 'Cheapest' }\r\n                    ],\r\n\r\n            },\r\n            value: 'fastest',\r\n            validation: {},\r\n            valid: true\r\n        },\r\n    })\r\n    const [formIsValid, setFormIsValid] = useState(false)   \r\n    \r\n\r\n\r\n    const orderHandler = (event) => {\r\n        // console.log(props.ingredients);\r\n        //alert('You Continued!');\r\n        event.preventDefault();       \r\n        const formData = {};\r\n        for (let formElementIdentifier in orderForm) {\r\n            formData[formElementIdentifier] = orderForm[formElementIdentifier].value;\r\n        }\r\n        //normally you calculate the price on the server side.. here is just for the example\r\n        const order = {\r\n            ingredients: props.ings,\r\n            price: props.price,\r\n            orderData: formData,\r\n            userId: props.userId\r\n        }\r\n       props.onOrderBurger(order, props.token);\r\n    };\r\n    \r\n\r\n    \r\n    const inputChangedHandler = (event, inputIdentifier) => {\r\n        //console.log(event.target.value);\r\n        // orderForm[inputIdentifier] = name, street, email\r\n        const updatedFormElement = updateObject(orderForm[inputIdentifier], {\r\n           value: event.target.value,\r\n           valid: checkValidity(event.target.value, orderForm[inputIdentifier].validation),\r\n           touched: true\r\n        }); \r\n        \r\n        const updatedOrderForm = updateObject(orderForm, {\r\n            //name, street, ...\r\n            [inputIdentifier]: updatedFormElement\r\n        });        \r\n        //console.log(updatedFormElement);\r\n        //check if all the elements are valid\r\n        let formIsValid = true;\r\n        for (let inputIdentifier in updatedOrderForm) {\r\n            formIsValid = updatedOrderForm[inputIdentifier].valid && formIsValid;\r\n        }\r\n        setOrderForm(updatedOrderForm);\r\n        setFormIsValid(formIsValid)        \r\n    };\r\n\r\n    \r\n    //converts state object into an array that can bee looped thru\r\n    const formElementsArray = [];\r\n    //key = name, street....\r\n    for (let key in orderForm) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            //orderForm[key] = elementType, elementConfig...\r\n            config: orderForm[key]\r\n        });\r\n    };\r\n\r\n    let form = (\r\n        <form onSubmit={orderHandler}>               \r\n            {formElementsArray.map(fromElement => (\r\n                <Input \r\n                key={fromElement.id}\r\n                elementType={fromElement.config.elementType}\r\n                elementConfig={fromElement.config.elementCofig}\r\n                value={fromElement.config.value}\r\n                invalid={!fromElement.config.valid}\r\n                shouldValidate={fromElement.config.validation}\r\n                touched={fromElement.config.touched}\r\n                changed={(event) => inputChangedHandler(event, fromElement.id)}\r\n            />\r\n            ))}\r\n            <Button btnType=\"Success\" disabled={!formIsValid} clicked={orderHandler}>Order</Button>\r\n        </form> \r\n    );\r\n    \r\n    if(props.loading) {\r\n        form = <Spinner />;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ContactData}>\r\n            <h4>Enter Your Contact Data</h4> \r\n            {form}     \r\n        </div>\r\n    )\r\n    \r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        price: state.burgerBuilder.totalPrice,\r\n        loading: state.order.loading,\r\n        token : state.auth.token,\r\n        userId: state.auth.userId\r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onOrderBurger: (orderData, token) => dispatch(actions.purchaseBurger(orderData, token))        \r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(ContactData, axios));\r\n","import React, {  } from 'react';\r\nimport CheckoutSummary from '../../Components/Order/CheckoutSummary/CheckoutSummary';\r\nimport {Route, Redirect} from 'react-router-dom';\r\nimport ContactData from './ContactData/ContactData';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nconst Checkout = props => {    \r\n\r\n    const onCheckoutCancelled = () => {\r\n        props.history.goBack();\r\n    };\r\n\r\n    const onCheckoutContinued = () => {\r\n        props.history.replace('./checkout/contact-data');\r\n    };\r\n\r\n    let summary = <Redirect to=\"/\" />\r\n    if(props.ings) {\r\n        const purchasedRedirect = props.purchased ? <Redirect to=\"/\" /> : null;\r\n        summary =(\r\n            <div>\r\n                {purchasedRedirect}\r\n                <CheckoutSummary \r\n                    ingredients={props.ings} \r\n                    onCheckoutCancelled={onCheckoutCancelled}\r\n                    onCheckoutContinued={onCheckoutContinued}\r\n                    /> \r\n                <Route\r\n                    path={props.match.path + '/contact-data'}\r\n                    component={ContactData}\r\n                    />\r\n            </div>\r\n        )\r\n    };\r\n\r\n    return summary          \r\n   \r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        ings: state.burgerBuilder.ingredients,\r\n        purchased: state.order.purchased\r\n        \r\n    }\r\n};\r\n \r\nexport default connect(mapStateToProps)(Checkout);\r\n","import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.Input];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select \r\n                    className={inputClasses.join(' ')}               \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label}</label>  \r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3HmBo\",\"Label\":\"Input_Label__1plPv\",\"Invalid\":\"Input_Invalid__24K3G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"CheckoutSummary\":\"CheckoutSummary_CheckoutSummary__25qLJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ContactData\":\"ContactData_ContactData__2MMFV\"};"],"sourceRoot":""}
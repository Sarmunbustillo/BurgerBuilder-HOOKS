{"version":3,"sources":["Components/UI/Input/Input.js","Components/UI/Input/Input.module.css","containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["Input","props","inputElement","inputClasses","classes","invalid","shouldValidate","touched","push","Invalid","elementType","className","join","elementConfig","value","onChange","changed","options","map","option","key","displayValue","label","module","exports","connect","state","loading","auth","error","isAuthenticated","token","buildingBurger","burgerBuilder","building","authRedirectPath","dispatch","onAuth","email","password","isSignUp","actions","onSetAuthRedirectPath","useState","elementCofig","type","placeholder","validation","required","isEmail","valid","minLength","authForm","setAuthForm","setIsSignUp","useEffect","formElementsArray","id","config","form","formElement","event","controlName","updatedauthForm","updateObject","target","checkValidity","inputChangedHandler","errorMesagge","message","authRedirect","to","Auth","onSubmit","preventDefault","btnType","clicked"],"mappings":"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","file":"static/js/4.2419933c.chunk.js","sourcesContent":["import React from 'react';\r\nimport classes from './Input.module.css';\r\n\r\nconst Input = (props) => {\r\n    let inputElement = null;\r\n    const inputClasses = [classes.Input];\r\n\r\n    if (props.invalid && props.shouldValidate && props.touched) {\r\n        inputClasses.push(classes.Invalid);\r\n    }\r\n\r\n    switch (props.elementType) {\r\n        case ('input'):\r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('textarea'):\r\n            inputElement = <textarea \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n            break;\r\n        case ('select'):\r\n            inputElement = (\r\n            <select \r\n                    className={inputClasses.join(' ')}               \r\n                value={props.value}\r\n                onChange={props.changed}>\r\n                {props.elementConfig.options.map(option => (\r\n                    <option key={option.value} value={option.value}>{option.displayValue}</option>\r\n                ))}\r\n            </select>\r\n            );\r\n            break;\r\n        default: \r\n            inputElement = <input \r\n                className={inputClasses.join(' ')}\r\n                {...props.elementConfig} \r\n                value={props.value} \r\n                onChange={props.changed}/>;\r\n    };\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <label className={classes.label}>{props.label}</label>  \r\n            {inputElement}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__3HmBo\",\"Label\":\"Input_Label__1plPv\",\"Invalid\":\"Input_Invalid__24K3G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__99yZn\"};","import React, { useState, useEffect } from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router-dom'\r\n\r\nimport Input from '../../Components/UI/Input/Input';\r\nimport Button from '../../Components/UI/Button/Button';\r\nimport classes from './Auth.module.css';\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../../Components/UI/Spinner/Spinner';\r\nimport { updateObject, checkValidity } from '../../shared/utility';\r\n\r\n\r\n\r\nconst Auth = props => {\r\n    const [authForm, setAuthForm] = useState({\r\n        email: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'email',\r\n                placeholder: 'Email Address'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                isEmail: true\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        },\r\n        password: {\r\n            elementType: 'input',\r\n            elementCofig: {\r\n                type: 'password',\r\n                placeholder: 'password'\r\n            },\r\n            value: '',\r\n            validation: {\r\n                required: true,\r\n                minLength: 6\r\n            },\r\n            valid: false,\r\n            touched: false\r\n        }\r\n    });\r\n\r\n    const [isSignUp, setIsSignUp] = useState(true);  \r\n\r\n    const {buildingBurger, authRedirectPath, onSetAuthRedirectPath} = props;\r\n    useEffect(() => {\r\n        if (!buildingBurger && authRedirectPath !== '/') {\r\n            onSetAuthRedirectPath();\r\n        }\r\n    }, [buildingBurger, authRedirectPath, onSetAuthRedirectPath])\r\n    \r\n    \r\n\r\n    const inputChangedHandler = (event, controlName) => {\r\n        const updatedauthForm = updateObject(authForm, {\r\n            [controlName]: updateObject(authForm[controlName], {\r\n                value: event.target.value,\r\n                valid: checkValidity(event.target.value, authForm[controlName].validation),\r\n                touched: true\r\n            })\r\n        });       \r\n        setAuthForm(updatedauthForm);\r\n    };    \r\n\r\n    const submitHandler = (event) => {\r\n        event.preventDefault();\r\n        props.onAuth(authForm.email.value, authForm.password.value, isSignUp);\r\n    };\r\n\r\n    const switchAuthModeHandler = () => {\r\n        setIsSignUp(!isSignUp)\r\n    }\r\n\r\n    \r\n    //converts state object into an array that can bee looped thru\r\n    const formElementsArray = [];\r\n    //key = email, password\r\n    for (let key in authForm) {\r\n        formElementsArray.push({\r\n            id: key,\r\n            //authForm[key] = elementType, elementConfig...\r\n            config: authForm[key]\r\n        });\r\n    }\r\n\r\n    let form = formElementsArray.map(formElement => (\r\n        <Input \r\n            key={formElement.id}\r\n            elementType={formElement.config.elementType}\r\n            elementConfig={formElement.config.elementCofig}\r\n            value={formElement.config.value}\r\n            invalid={!formElement.config.valid}\r\n            shouldValidate={formElement.config.validation}\r\n            touched={formElement.config.touched}\r\n            changed={(event) => inputChangedHandler(event, formElement.id)}\r\n        />\r\n        \r\n    ));\r\n\r\n    if(props.loading) {\r\n        form = <Spinner />\r\n    }\r\n\r\n    let errorMesagge = null;\r\n    if(props.error) {\r\n        errorMesagge = (\r\n            <p>{props.error.message}</p>\r\n        );\r\n    }\r\n\r\n    let authRedirect = null;\r\n    if(props.isAuthenticated) {\r\n        authRedirect = <Redirect to={props.authRedirectPath} />\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Auth}>\r\n            {authRedirect}\r\n            {errorMesagge}\r\n            <form onSubmit={submitHandler}> \r\n                {form}\r\n                <Button btnType=\"Success\">SUBMIT</Button>\r\n            </form>\r\n            <Button \r\n                btnType=\"Danger\"\r\n                clicked={switchAuthModeHandler}\r\n                >SWITCH TO {isSignUp ? 'SIGNIN' : 'SINGUP'}</Button>\r\n        </div>\r\n    )    \r\n};\r\n\r\nconst mapStateToProps = state => {    \r\n    return {\r\n        loading: state.auth.loading,\r\n        error: state.auth.error,\r\n        isAuthenticated : state.auth.token !== null,\r\n        buildingBurger: state.burgerBuilder.building,\r\n        authRedirectPath: state.auth.authRedirectPath\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\r\n        onSetAuthRedirectPath: () => dispatch(actions.setAuthRedirectPath('/'))\r\n    }\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)( Auth);"],"sourceRoot":""}